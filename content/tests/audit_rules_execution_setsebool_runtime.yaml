title: Record any attempts to run 'setsebool' (RUNTIME)

description: |-
  At a minimum, the audit system should collect any execution attempt
  of the `setsebool` command for all users and root. If the auditd
  daemon is configured to use the augenrules program to read audit rules
  during daemon startup (the default), add the following lines to a file with suffix
  `.rules` in the directory `/etc/audit/rules.d`:
  
  `-a always,exit -F path=/usr/sbin/setsebool -F auid>=auid -F auid!=unset -F key=privileged`
  
  If the auditd daemon is configured to use the `auditctl`
  utility to read audit rules during daemon startup, add the following lines to
  /etc/audit/audit.rules file:
  
  `-a always,exit -F path=/usr/sbin/setsebool -F auid>=auid -F auid!=unset -F key=privileged`

blocks:
  - id: collect_auditctl
    title: Collect rules from 'auditctl'
    type: probe
    kind: auditctl_output

  - id: find_rules
    title: Find the rule
    type: filter
    kind: cel
    sources:
      - collect_auditctl
    properties:
      expression: >- 
        audit_has_rule(arguments.rules.rules, arguments.wanted_rule)
      arguments:
        rules: "$1"
        wanted_rule:
         - ['-F arch=b64', '-F arch=b32']
         - '-F path=/usr/sbin/setsebool'
         - '-F perm=x'
         - '-F auid>=1000'
         - ['-F auid!=unset', '-F auid!=4294967295', '-F auid!=-1']

  - id: filter
    title: If rule is not found for both b32 and b64 architectures it is a finding
    type: filter
    kind: cel
    sources:
      - find_rules
    properties:
      expression: >-
        {
        'result': arguments.found_rules.filter(r, r.status.correct).size() < 2,
        'findings': {'invalid_rules': arguments.found_rules.filter(r, !r.status.correct)}
        }
      arguments:
        found_rules: "$1"
